Traceback (most recent call last):
  File "/home/mech/.local/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/lib/python3/dist-packages/nbclient/client.py", line 1093, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/lib/python3/dist-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/lib/python3/dist-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/lib/python3.10/asyncio/base_events.py", line 646, in run_until_complete
    return future.result()
  File "/usr/lib/python3/dist-packages/nbclient/client.py", line 559, in async_execute
    await self.async_execute_cell(
  File "/usr/lib/python3/dist-packages/nbclient/client.py", line 854, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/usr/lib/python3/dist-packages/nbclient/client.py", line 756, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
flights_polarstern = np.array([])
times_polarstern = np.array([])

for flight_id, flight in meta['ACLOUD']['P5'].items():
    
    # skip dates before and after polarstern cruise
    if flight['date'] not in dates:
        continue
    
    # read gps data of flight
    ds_gps = cat['ACLOUD']['P5']['GPS_INS'][flight_id].to_dask()
    
    # calculate distance to Polarstern
    ds_dist = dist2polarstern(ds_gps, ds_pol.sel(time=ds_gps.time))

    if ds_dist['dist'].min() < 15:
        
        time_sec = ds_dist['dist'].sel(time=ds_dist['dist'] < 15).count()
        times_polarstern = np.append(times_polarstern, time_sec/60)
        
        flights_polarstern = np.append(flights_polarstern, flight_id)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mCRSError[0m                                  Traceback (most recent call last)
[0;32m/tmp/ipykernel_293063/3036328153.py[0m in [0;36m<module>[0;34m[0m
[1;32m     12[0m [0;34m[0m[0m
[1;32m     13[0m     [0;31m# calculate distance to Polarstern[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 14[0;31m     [0mds_dist[0m [0;34m=[0m [0mdist2polarstern[0m[0;34m([0m[0mds_gps[0m[0;34m,[0m [0mds_pol[0m[0;34m.[0m[0msel[0m[0;34m([0m[0mtime[0m[0;34m=[0m[0mds_gps[0m[0;34m.[0m[0mtime[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     15[0m [0;34m[0m[0m
[1;32m     16[0m     [0;32mif[0m [0mds_dist[0m[0;34m[[0m[0;34m'dist'[0m[0;34m][0m[0;34m.[0m[0mmin[0m[0;34m([0m[0;34m)[0m [0;34m<[0m [0;36m15[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/tmp/ipykernel_293063/4173373055.py[0m in [0;36mdist2polarstern[0;34m(ds_gps, ds_pol)[0m
[1;32m      7[0m     [0;31m# read coordinate systems[0m[0;34m[0m[0;34m[0m[0m
[1;32m      8[0m     [0mcrs_g[0m [0;34m=[0m [0mccrs[0m[0;34m.[0m[0mPlateCarree[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 9[0;31m     [0mcrs_p[0m [0;34m=[0m [0mccrs[0m[0;34m.[0m[0mUTM[0m[0;34m([0m[0mzone[0m[0;34m=[0m[0;34m'33X'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     10[0m [0;34m[0m[0m
[1;32m     11[0m     [0;31m# aircraft: geographic --> projected[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/.local/lib/python3.10/site-packages/cartopy/crs.py[0m in [0;36m__init__[0;34m(self, zone, southern_hemisphere, globe)[0m
[1;32m   1531[0m         [0;32mif[0m [0msouthern_hemisphere[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1532[0m             [0mproj4_params[0m[0;34m.[0m[0mappend[0m[0;34m([0m[0;34m([0m[0;34m'south'[0m[0;34m,[0m [0;32mNone[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1533[0;31m         [0msuper[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0m__init__[0m[0;34m([0m[0mproj4_params[0m[0;34m,[0m [0mglobe[0m[0;34m=[0m[0mglobe[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1534[0m         [0mself[0m[0;34m.[0m[0mthreshold[0m [0;34m=[0m [0;36m1e2[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1535[0m [0;34m[0m[0m

[0;32m~/.local/lib/python3.10/site-packages/cartopy/crs.py[0m in [0;36m__init__[0;34m(self, *args, **kwargs)[0m
[1;32m    656[0m [0;34m[0m[0m
[1;32m    657[0m     [0;32mdef[0m [0m__init__[0m[0;34m([0m[0mself[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 658[0;31m         [0msuper[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0m__init__[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    659[0m         [0mself[0m[0;34m.[0m[0mbounds[0m [0;34m=[0m [0;32mNone[0m[0;34m[0m[0;34m[0m[0m
[1;32m    660[0m         [0;32mif[0m [0mself[0m[0;34m.[0m[0marea_of_use[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/.local/lib/python3.10/site-packages/cartopy/crs.py[0m in [0;36m__init__[0;34m(self, proj4_params, globe)[0m
[1;32m    187[0m                     [0minit_items[0m[0;34m.[0m[0mappend[0m[0;34m([0m[0;34mf'+{k}'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    188[0m             [0mself[0m[0;34m.[0m[0mproj4_init[0m [0;34m=[0m [0;34m' '[0m[0;34m.[0m[0mjoin[0m[0;34m([0m[0minit_items[0m[0;34m)[0m [0;34m+[0m [0;34m' +no_defs'[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 189[0;31m         [0msuper[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0m__init__[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mproj4_init[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    190[0m [0;34m[0m[0m
[1;32m    191[0m     [0;32mdef[0m [0m__eq__[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mother[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/.local/lib/python3.10/site-packages/pyproj/crs/crs.py[0m in [0;36m__init__[0;34m(self, projparams, **kwargs)[0m
[1;32m    346[0m             [0mself[0m[0;34m.[0m[0m_local[0m[0;34m.[0m[0mcrs[0m [0;34m=[0m [0mprojparams[0m[0;34m[0m[0;34m[0m[0m
[1;32m    347[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 348[0;31m             [0mself[0m[0;34m.[0m[0m_local[0m[0;34m.[0m[0mcrs[0m [0;34m=[0m [0m_CRS[0m[0;34m([0m[0mself[0m[0;34m.[0m[0msrs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    349[0m [0;34m[0m[0m
[1;32m    350[0m     [0;34m@[0m[0mproperty[0m[0;34m[0m[0;34m[0m[0m

[0;32mpyproj/_crs.pyx[0m in [0;36mpyproj._crs._CRS.__init__[0;34m()[0m

[0;31mCRSError[0m: Invalid projection: +proj=utm +ellps=WGS84 +units=m +zone=33X +no_defs +type=crs: (Internal Proj Error: proj_create: Error 1027 (Invalid value for an argument): utm: Invalid value for zone)
CRSError: Invalid projection: +proj=utm +ellps=WGS84 +units=m +zone=33X +no_defs +type=crs: (Internal Proj Error: proj_create: Error 1027 (Invalid value for an argument): utm: Invalid value for zone)

